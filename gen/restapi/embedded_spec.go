// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "UA-SVC",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/health": {
      "get": {
        "description": "check health of service",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "health status of service",
            "schema": {
              "$ref": "#/definitions/health"
            }
          }
        }
      }
    },
    "/username": {
      "post": {
        "description": "add username",
        "operationId": "addUsername",
        "parameters": [
          {
            "description": "username to add",
            "name": "username",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "username added",
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "username already exists"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/username/availability": {
      "get": {
        "description": "check username",
        "operationId": "getUsername",
        "parameters": [
          {
            "type": "string",
            "description": "username to check",
            "name": "username",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user retrieved",
            "schema": {
              "$ref": "#/definitions/availability"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "availability": {
      "type": "object",
      "required": [
        "username",
        "exists"
      ],
      "properties": {
        "exists": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "health": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "data_store": {
          "type": "string"
        },
        "main": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "UA-SVC",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/health": {
      "get": {
        "description": "check health of service",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "health status of service",
            "schema": {
              "$ref": "#/definitions/health"
            }
          }
        }
      }
    },
    "/username": {
      "post": {
        "description": "add username",
        "operationId": "addUsername",
        "parameters": [
          {
            "description": "username to add",
            "name": "username",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "username added",
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "username already exists"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/username/availability": {
      "get": {
        "description": "check username",
        "operationId": "getUsername",
        "parameters": [
          {
            "type": "string",
            "description": "username to check",
            "name": "username",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user retrieved",
            "schema": {
              "$ref": "#/definitions/availability"
            }
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "availability": {
      "type": "object",
      "required": [
        "username",
        "exists"
      ],
      "properties": {
        "exists": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "health": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "data_store": {
          "type": "string"
        },
        "main": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    }
  }
}`))
}
