// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddUsernameHandlerFunc turns a function with the right signature into a add username handler
type AddUsernameHandlerFunc func(AddUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddUsernameHandlerFunc) Handle(params AddUsernameParams) middleware.Responder {
	return fn(params)
}

// AddUsernameHandler interface for that can handle valid add username params
type AddUsernameHandler interface {
	Handle(AddUsernameParams) middleware.Responder
}

// NewAddUsername creates a new http.Handler for the add username operation
func NewAddUsername(ctx *middleware.Context, handler AddUsernameHandler) *AddUsername {
	return &AddUsername{Context: ctx, Handler: handler}
}

/* AddUsername swagger:route POST /username addUsername

add username

*/
type AddUsername struct {
	Context *middleware.Context
	Handler AddUsernameHandler
}

func (o *AddUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddUsernameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddUsernameBody add username body
//
// swagger:model AddUsernameBody
type AddUsernameBody struct {

	// username
	// Required: true
	// Min Length: 1
	Username *string `json:"username"`
}

// Validate validates this add username body
func (o *AddUsernameBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddUsernameBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username"+"."+"username", "body", *o.Username, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add username body based on context it is used
func (o *AddUsernameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddUsernameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddUsernameBody) UnmarshalBinary(b []byte) error {
	var res AddUsernameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddUsernameCreatedBody add username created body
//
// swagger:model AddUsernameCreatedBody
type AddUsernameCreatedBody struct {

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this add username created body
func (o *AddUsernameCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddUsernameCreatedBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("addUsernameCreated"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add username created body based on context it is used
func (o *AddUsernameCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddUsernameCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddUsernameCreatedBody) UnmarshalBinary(b []byte) error {
	var res AddUsernameCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
